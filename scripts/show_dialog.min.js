/**!
 * Created by ZweiL on 2016/12/1.
 *
 * 亿账柜手机端定制提示框插件，依赖jquery；
 * 使用方法：new Dialog(dialogId, options)；
 * dialogId 为带井号的元素id，options为可选参数；
 *
 * 可选参数如下：
 * overlayId 遮掩层的id，类型：String，默认会自动生成；
 * overlayColor 遮掩层颜色，类型：String，合法的css颜色值即可，默认是黑色；
 * overlayOpacity 遮掩层透明度，类型：String，0-1之间的值，默认是0.7；
 * overlayClose 设置遮掩层是否点击关闭，类型：Boolean，默认true；
 * callbackBefore 关闭前调用的函数，类型function，默认null；
 * callbackAfter 关闭后调用的函数，类型function，默认null；
 * time 设置定时关闭，类型Number，单位毫秒，默认null。
 *
 * 属性
 * 实例本身即是提示框的jquery对象；
 * options 保存了所有的可选参数，可随时修改；
 * overlay 保存了遮掩层的jquery对象；
 *
 * 方法
 * 实例本身拥有jquery对象的所有方法；
 * addText(text) 增加提示框内的文本，参数text支持直接选入带html标签的字符串，也可以是img图片标签；
 * addButton(buttonList) 增加提示框内的按钮，参数buttonList为key-value对象，key为按钮id（不需要井号），value为显示在按钮上的文本；
 * cleanText() 清空提示框内的文本；
 * cleanButton() 清空提示框内的按钮；
 * setText(text) 清空并设置提示框内的文本，参数同addText；
 * setButton(buttonList) 清空并设置提示框内的按钮，参数同addButton。
 */
function Dialog(dialogId, options) {
    function setClock($this) {
        _clock = setTimeout(function () {
            $this.remove_dialog()
        }, $this.options.time)
    }

    var _rule = /#.*/gi;
    if (!_rule.test(dialogId)) return void console.log("提示框初始化失败，请传入带井号的提示框id，退出！");
    if (options) {
        if (options.overlayId && !rule.test(options.overlayId)) return void console.log("传入参数有误，请传入带井号的遮掩层id，退出！");
        if (options.callbackBefore && "function" != typeof options.callbackBefore) return void console.log("传入的回调函数有误，退出！");
        if (options.callbackAfter && "function" != typeof options.callbackAfter) return void console.log("传入的回调函数有误，退出！")
    }
    var _dialog = $(dialogId), _isNormal = !1;
    0 === _dialog.length && ($('<div class="dialog-main normal" style="display: none" id="' + dialogId.slice(1) + '"><div class="dialog-normal-main"> <div class="dialog-normal-text"> </div> <div class="dialog-normal-button"></div></div></div>').appendTo("body"), _isNormal = !0), $.extend(this, $(dialogId));
    var _defaults = {
        "overlayId": dialogId + "_overlay",
        "overlayColor": "#000",
        "overlayOpacity": "0.7",
        "overlayClose": !0,
        "callbackBefore": null,
        "callbackAfter": null,
        "time": null
    };
    this.options = $.extend(_defaults, options), this.before('<div class="dialog-overlay" id="' + this.options.overlayId.slice(1) + '"></div>'), this.overlay = $(this.options.overlayId), this.overlay.css({"background": this.options.overlayColor}), _isNormal && (this.$textBox = this.find(".dialog-normal-text"), this.$buttonBox = this.find(".dialog-normal-button"));
    var _clock = null;
    this.show_dialog = function () {
        this.fadeTo(200, 1), this.overlay.fadeTo(200, this.options.overlayOpacity), this.options.time && setClock(this)
    }, this.remove_dialog = function () {
        if (clearTimeout(_clock), this.options.callbackBefore && this.options.callbackBefore(), this.fadeOut(), this.overlay.fadeOut(), this.options.callbackAfter) return this.options.callbackAfter()
    }, this.options.overlayClose && this.listenOverlayClose(this)
}

Dialog.prototype.addText = function (text) {
    this.$textBox ? this.$textBox.append(text) : console.log("非默认提示框，不提供该方法")
}, Dialog.prototype.addButton = function (buttonList) {
    if (this.$buttonBox) {
        var html = "";
        for (var i in buttonList) buttonList.hasOwnProperty(i) && (html += '<div id="' + i + '" class="dialog-normal-button-item"">' + buttonList[i] + "</div>");
        this.$buttonBox.append(html)
    } else console.log("非默认提示框，不提供该方法")
}, Dialog.prototype.listenOverlayClose = function ($this) {
    $this.overlay.on("click", function () {
        $this.remove_dialog()
    })
}, Dialog.prototype.cleanText = function () {
    this.$textBox ? this.$textBox.empty() : console.log("非默认提示框，不提供该方法")
}, Dialog.prototype.cleanButton = function () {
    this.$textBox ? this.$buttonBox.empty() : console.log("非默认提示框，不提供该方法")
}, Dialog.prototype.setText = function (text) {
    this.$textBox ? (this.cleanText(), this.addText(text)) : console.log("非默认提示框，不提供该方法")
}, Dialog.prototype.setButton = function (buttonList) {
    this.$textBox ? (this.cleanButton(), this.addButton(buttonList)) : console.log("非默认提示框，不提供该方法")
};